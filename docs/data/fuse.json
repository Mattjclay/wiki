{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Root","n":1},"1":{"v":"# Watch out for Bears!\n\nClick a link to become more smart-er-er\n[[CTF Write-up Domains| CTF Write-ups.Domains]]","n":0.258}}},{"i":2,"$":{"0":{"v":"Tags","n":1}}},{"i":3,"$":{"0":{"v":"Flags","n":1},"1":{"v":"[[Crypto Flags|tags.Flags.Crypto]]\n[[Forensics Flags|tags.Flags.Forensics]]\n[[Reversing Flags|tags.Flags.Reversing]]\n[[Web Flags|tags.Flags.Web]]\n[[PWN Flags|tags.Flags.PWN]]","n":0.408}}},{"i":4,"$":{"0":{"v":"Web","n":1},"1":{"v":"[[Back to Flags|tags.Flags]]\n\n## Hexoding\n[[Go to Writeup for Hexoding|CTF Write-ups.Domains.Crypto.Hexoding]]\n### Flag\nHTB{kn0w1ng_h0w_t0_1d3nt1fy_3nc0d1ng_sch3m3s_1s_cruc14l_f0r_a_crypt0gr4ph3r___4ls0_d0_n0t_c0nfus3_enc0d1ng_w1th_encryp510n!}","n":0.316}}},{"i":5,"$":{"0":{"v":"Reversing","n":1},"1":{"v":"[[Back to Flags|tags.Flags]]\n\n## Hexoding\n[[Go to Writeup for Hexoding|CTF Write-ups.Domains.Crypto.Hexoding]]\n### Flag\nHTB{kn0w1ng_h0w_t0_1d3nt1fy_3nc0d1ng_sch3m3s_1s_cruc14l_f0r_a_crypt0gr4ph3r___4ls0_d0_n0t_c0nfus3_enc0d1ng_w1th_encryp510n!}","n":0.316}}},{"i":6,"$":{"0":{"v":"PWN","n":1},"1":{"v":"[[Back to Flags|tags.Flags]]\n\n## Hexoding\n[[Go to Writeup for Hexoding|CTF Write-ups.Domains.Crypto.Hexoding]]\n### Flag\nHTB{kn0w1ng_h0w_t0_1d3nt1fy_3nc0d1ng_sch3m3s_1s_cruc14l_f0r_a_crypt0gr4ph3r___4ls0_d0_n0t_c0nfus3_enc0d1ng_w1th_encryp510n!}","n":0.316}}},{"i":7,"$":{"0":{"v":"Forensics","n":1},"1":{"v":"[[Back to Flags|tags.Flags]]\n\n## Hexoding\n[[Go to Writeup for Hexoding|CTF Write-ups.Domains.Crypto.Hexoding]]\n### Flag\nHTB{kn0w1ng_h0w_t0_1d3nt1fy_3nc0d1ng_sch3m3s_1s_cruc14l_f0r_a_crypt0gr4ph3r___4ls0_d0_n0t_c0nfus3_enc0d1ng_w1th_encryp510n!}","n":0.316}}},{"i":8,"$":{"0":{"v":"Crypto","n":1},"1":{"v":"[[Back to Flags|tags.Flags]]\n\n## Hexoding\n![[Go to Writeup for Hexoding|CTF Write-ups.Domains.Crypto.Hexoding#solution-code]]\n\n### Flag\n[[Go to Writeup for Hexoding|CTF Write-ups.Domains.Crypto.Hexoding#solution-code]]\nHTB{kn0w1ng_h0w_t0_1d3nt1fy_3nc0d1ng_sch3m3s_1s_cruc14l_f0r_a_crypt0gr4ph3r___4ls0_d0_n0t_c0nfus3_enc0d1ng_w1th_encryp510n!}\n\n","n":0.258}}},{"i":9,"$":{"0":{"v":"CTF Write Ups","n":0.577}}},{"i":10,"$":{"0":{"v":"Domains","n":1}}},{"i":11,"$":{"0":{"v":"Crypto","n":1}}},{"i":12,"$":{"0":{"v":"Hexoding","n":1},"1":{"v":"[[Link to flags|tags.Flags.Crypto]]\n\nBelow is the encoded flag found in **output.txt**\nThe top line is encoded in **HEX**\nThe bottom line is encoded in **BASE64**\n\n**Please note**, you **do not** need to run the script **source.py** to solve this challenge.\n\n\n\n**HEX** \n4854427b6b6e3077316e675f6830775f74305f3164336e743166795f336e633064316e675f736368336d33735f31735f6372756331346c5f6630725f615f\n\n**BASE64**\nY3J5cHQwZ3I0cGgzcl9fXzRsczBfZDBfbjB0X2MwbmZ1czNfZW5jMGQxbmdfdzF0aF9lbmNyeXA1MTBuIX0=\n\n\n\nBy reading the source code it is fairly easy to see what the program does. There is a flag stored in the **secret.FLAG** array. The array is split in half then encoded. **On line 69** you can see that the program returns a string, the first string is encoded in **HEX** then a newline is inserted, the second string is then encoded in **BASE64**, the result is then written to the file **output.txt**\n\n## Source Code\n``` python\nfrom secret import FLAG\n\nHEX_CHARS = '0123456789abcdef'\nB64_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\n\ndef to_hex(data):\n    data = int.from_bytes(data, 'big')\n    encoded = ''\n    while data:\n        i = data % 16\n        encoded = HEX_CHARS[i] + encoded\n        data >>= 4\n    return '0' * (len(encoded) % 2) + encoded\n\n\ndef to_base64(data):\n    padding_length = 0\n\n    if len(data) % 3 != 0:\n        padding_length = (len(data) + 3 - len(data) % 3) - len(data)\n\n    data += b'\\x00' * padding_length\n    bits = ''.join([bin(c)[2:].zfill(8) for c in data])\n    blocks = [bits[i:i+6] for i in range(0, len(bits), 6)]\n\n    encoded = ''\n    for block in blocks:\n        encoded += B64_CHARS[int(block, 2)]\n\n    return encoded[:-padding_length] + '=' * padding_length\n\n\ndef main():\n    first_half = FLAG[:len(FLAG)//2]\n    second_half = FLAG[len(FLAG)//2:]\n\n    hex_encoded = to_hex(first_half)\n    base64_encoded = to_base64(second_half)\n\n    with open('output.txt', 'w') as f:\n        f.write(f'{hex_encoded}\\n{base64_encoded}')\n\nmain()\n```\n\n\n\n## Solution Code\nCreate a script and run it in the same directory as the **output.txt** file from the challenge files. Your flag will be printed to the terminal and to a file called **flag.txt**\n``` python\nimport base64\n\n\ndef decode_hex(string_to_decode):\n    return str(bytes.fromhex(string_to_decode), 'utf-8')\n\ndef decode_base64(string_to_decode):\n    return str(base64.b64decode(string_to_decode), 'utf-8')\n\nwith open('./output.txt', 'r') as file:\n    flag_result = \"\"\n    try:\n        with open('./flag.txt', 'w') as out_file:\n            flag_result += decode_hex(file.readline())\n            flag_result += decode_base64(file.readline())\n            out_file.write(flag_result)\n            print(f\"File flag.txt created with your flag in it! \\n{flag_result}\")\n\n    except:\n        pass\n\n```","n":0.058}}},{"i":13,"$":{"0":{"v":"Brent","n":1}}},{"i":14,"$":{"0":{"v":"48Meatballss","n":1},"1":{"v":"Don't eat 48 meatballs at once","n":0.408}}}]}
