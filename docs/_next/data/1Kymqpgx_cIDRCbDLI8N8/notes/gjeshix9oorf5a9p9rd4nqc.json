{"pageProps":{"note":{"id":"gjeshix9oorf5a9p9rd4nqc","title":"Hexoding","desc":"","tags":"Flags.Crypto","updated":1698107632247,"created":1698077333395,"custom":{},"fname":"CTF Write-ups.Domains.Crypto.Hexoding","type":"note","vault":{"fsPath":".","selfContained":true,"name":"docs"},"contentHash":"6791277e1afaaa14702c1eff45d4d2a1","links":[{"type":"frontmatterTag","from":{"fname":"CTF Write-ups.Domains.Crypto.Hexoding","id":"gjeshix9oorf5a9p9rd4nqc","vaultName":"docs"},"value":"tags.Flags.Crypto","alias":"Flags.Crypto","xvault":false,"to":{"fname":"tags.Flags.Crypto"}},{"type":"wiki","from":{"fname":"CTF Write-ups.Domains.Crypto.Hexoding","id":"gjeshix9oorf5a9p9rd4nqc","vaultName":"docs"},"value":"tags.Flags.Crypto","alias":"Link to flags","position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1,"column":36,"offset":35},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"tags.Flags.Crypto"}},{"from":{"fname":"tags.Flags.Crypto","id":"sivwz35gp2qcyi21o5xaeni","vaultName":"docs"},"type":"backlink","position":{"start":{"line":7,"column":1,"offset":136},"end":{"line":7,"column":83,"offset":218},"indent":[]},"value":"CTF Write-ups.Domains.Crypto.Hexoding"},{"from":{"fname":"tags.Flags.Crypto","id":"sivwz35gp2qcyi21o5xaeni","vaultName":"docs"},"type":"backlink","position":{"start":{"line":4,"column":1,"offset":42},"end":{"line":4,"column":84,"offset":125},"indent":[]},"value":"CTF Write-ups.Domains.Crypto.Hexoding"},{"from":{"fname":"tags.Flags.Forensics","id":"juc5jep7viz4lz3698b93v9","vaultName":"docs"},"type":"backlink","position":{"start":{"line":4,"column":1,"offset":42},"end":{"line":4,"column":69,"offset":110},"indent":[]},"value":"CTF Write-ups.Domains.Crypto.Hexoding"},{"from":{"fname":"tags.Flags.PWN","id":"9q5jc0huohsyclbegei70wu","vaultName":"docs"},"type":"backlink","position":{"start":{"line":4,"column":1,"offset":42},"end":{"line":4,"column":69,"offset":110},"indent":[]},"value":"CTF Write-ups.Domains.Crypto.Hexoding"},{"from":{"fname":"tags.Flags.Reversing","id":"2ndy8kzeposl6lia32qb4la","vaultName":"docs"},"type":"backlink","position":{"start":{"line":4,"column":1,"offset":42},"end":{"line":4,"column":69,"offset":110},"indent":[]},"value":"CTF Write-ups.Domains.Crypto.Hexoding"},{"from":{"fname":"tags.Flags.Web","id":"2zo89td5kdbavscn9npskle","vaultName":"docs"},"type":"backlink","position":{"start":{"line":4,"column":1,"offset":42},"end":{"line":4,"column":69,"offset":110},"indent":[]},"value":"CTF Write-ups.Domains.Crypto.Hexoding"}],"anchors":{"source-code":{"type":"header","text":"Source Code","value":"source-code","line":28,"column":0,"depth":2},"solution-code":{"type":"header","text":"Solution Code","value":"solution-code","line":78,"column":0,"depth":2}},"children":[],"parent":"z653tcwbhhvixywdz7urkj5","data":{}},"body":"<h1 id=\"hexoding\">Hexoding<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hexoding\"></a></h1>\n<p><a class=\"color-tag\" style=\"--tag-color: #a4bf20;\" href=\"/notes/sivwz35gp2qcyi21o5xaeni\">Link to flags</a></p>\n<p>Below is the encoded flag found in <strong>output.txt</strong>\nThe top line is encoded in <strong>HEX</strong>\nThe bottom line is encoded in <strong>BASE64</strong></p>\n<p><strong>Please note</strong>, you <strong>do not</strong> need to run the script <strong>source.py</strong> to solve this challenge.</p>\n<p><strong>HEX</strong>\n4854427b6b6e3077316e675f6830775f74305f3164336e743166795f336e633064316e675f736368336d33735f31735f6372756331346c5f6630725f615f</p>\n<p><strong>BASE64</strong>\nY3J5cHQwZ3I0cGgzcl9fXzRsczBfZDBfbjB0X2MwbmZ1czNfZW5jMGQxbmdfdzF0aF9lbmNyeXA1MTBuIX0=</p>\n<p>By reading the source code it is fairly easy to see what the program does. There is a flag stored in the <strong>secret.FLAG</strong> array. The array is split in half then encoded. <strong>On line 69</strong> you can see that the program returns a string, the first string is encoded in <strong>HEX</strong> then a newline is inserted, the second string is then encoded in <strong>BASE64</strong>, the result is then written to the file <strong>output.txt</strong></p>\n<h2 id=\"source-code\">Source Code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#source-code\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> secret <span class=\"token keyword\">import</span> FLAG\n\nHEX_CHARS <span class=\"token operator\">=</span> <span class=\"token string\">'0123456789abcdef'</span>\nB64_CHARS <span class=\"token operator\">=</span> <span class=\"token string\">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">to_hex</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    data <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">.</span>from_bytes<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token string\">'big'</span><span class=\"token punctuation\">)</span>\n    encoded <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">while</span> data<span class=\"token punctuation\">:</span>\n        i <span class=\"token operator\">=</span> data <span class=\"token operator\">%</span> <span class=\"token number\">16</span>\n        encoded <span class=\"token operator\">=</span> HEX_CHARS<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> encoded\n        data <span class=\"token operator\">>></span><span class=\"token operator\">=</span> <span class=\"token number\">4</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'0'</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> encoded\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">to_base64</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    padding_length <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        padding_length <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n    data <span class=\"token operator\">+=</span> <span class=\"token string\">b'\\x00'</span> <span class=\"token operator\">*</span> padding_length\n    bits <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token builtin\">bin</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>zfill<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> c <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    blocks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>bits<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">:</span>i<span class=\"token operator\">+</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>bits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    encoded <span class=\"token operator\">=</span> <span class=\"token string\">''</span>\n    <span class=\"token keyword\">for</span> block <span class=\"token keyword\">in</span> blocks<span class=\"token punctuation\">:</span>\n        encoded <span class=\"token operator\">+=</span> B64_CHARS<span class=\"token punctuation\">[</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token keyword\">return</span> encoded<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>padding_length<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token string\">'='</span> <span class=\"token operator\">*</span> padding_length\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    first_half <span class=\"token operator\">=</span> FLAG<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>FLAG<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n    second_half <span class=\"token operator\">=</span> FLAG<span class=\"token punctuation\">[</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>FLAG<span class=\"token punctuation\">)</span><span class=\"token operator\">//</span><span class=\"token number\">2</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n    hex_encoded <span class=\"token operator\">=</span> to_hex<span class=\"token punctuation\">(</span>first_half<span class=\"token punctuation\">)</span>\n    base64_encoded <span class=\"token operator\">=</span> to_base64<span class=\"token punctuation\">(</span>second_half<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'output.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>hex_encoded<span class=\"token punctuation\">}</span></span><span class=\"token string\">\\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>base64_encoded<span class=\"token punctuation\">}</span></span><span class=\"token string\">'</span></span><span class=\"token punctuation\">)</span>\n\nmain<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"solution-code\">Solution Code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#solution-code\"></a></h2>\n<p>Create a script and run it in the same directory as the <strong>output.txt</strong> file from the challenge files. Your flag will be printed to the terminal and to a file called <strong>flag.txt</strong></p>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> base64\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decode_hex</span><span class=\"token punctuation\">(</span>string_to_decode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span><span class=\"token punctuation\">.</span>fromhex<span class=\"token punctuation\">(</span>string_to_decode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">decode_base64</span><span class=\"token punctuation\">(</span>string_to_decode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>base64<span class=\"token punctuation\">.</span>b64decode<span class=\"token punctuation\">(</span>string_to_decode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./output.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n    flag_result <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./flag.txt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> out_file<span class=\"token punctuation\">:</span>\n            flag_result <span class=\"token operator\">+=</span> decode_hex<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            flag_result <span class=\"token operator\">+=</span> decode_base64<span class=\"token punctuation\">(</span><span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            out_file<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>flag_result<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f\"File flag.txt created with your flag in it! \\n</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span>flag_result<span class=\"token punctuation\">}</span></span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">except</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">pass</span>\n\n</code></pre>\n<hr>\n<h2 id=\"tags\">Tags<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tags\"></a></h2>\n<ol>\n<li><a class=\"color-tag\" style=\"--tag-color: #a4bf20;\" href=\"/notes/sivwz35gp2qcyi21o5xaeni\">Flags.Crypto</a></li>\n</ol>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a class=\"color-tag\" style=\"--tag-color: #a4bf20;\" href=\"/notes/sivwz35gp2qcyi21o5xaeni\">Crypto</a></li>\n<li><a class=\"color-tag\" style=\"--tag-color: #fbeeac;\" href=\"/notes/juc5jep7viz4lz3698b93v9\">Forensics</a></li>\n<li><a class=\"color-tag\" style=\"--tag-color: #7e1e9c;\" href=\"/notes/9q5jc0huohsyclbegei70wu\">PWN</a></li>\n<li><a class=\"color-tag\" style=\"--tag-color: #05472a;\" href=\"/notes/2ndy8kzeposl6lia32qb4la\">Reversing</a></li>\n<li><a class=\"color-tag\" style=\"--tag-color: #983fb2;\" href=\"/notes/2zo89td5kdbavscn9npskle\">Web</a></li>\n</ul>","noteIndex":{"id":"okgr2b1jas72cz5mhswl4kc","title":"Root","desc":"","updated":1698107449901,"created":1698029981785,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"docs"},"contentHash":"1a4e1ab811129f8996eef898ca20e54b","links":[{"type":"wiki","from":{"fname":"root","id":"okgr2b1jas72cz5mhswl4kc","vaultName":"docs"},"value":"CTF Write-ups.Domains","alias":"CTF Write-up Domains","position":{"start":{"line":4,"column":1,"offset":64},"end":{"line":4,"column":48,"offset":111},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"CTF Write-ups.Domains"}}],"anchors":{"watch-out-for-bears":{"type":"header","text":"Watch out for Bears!","value":"watch-out-for-bears","line":7,"column":0,"depth":1}},"children":["nrnf46vpk4kfcq2zrc8e6za","q8ghl1mppzw4r8qtav6hqly","gf3wiaxswf7duzds3bgyg5d"],"parent":null,"data":{},"body":"# Watch out for Bears!\n\nClick a link to become more smart-er-er\n[[CTF Write-up Domains| CTF Write-ups.Domains]]"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"docs"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"localhost:3000","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}